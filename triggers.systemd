#  -*- Mode: rpm-spec; indent-tabs-mode: nil -*- */
#  SPDX-License-Identifier: LGPL-2.1+
#
#  This file is part of systemd.
#  Copyright Â© 2018 Neal Gompa

# The contents of this are an example to be copied into systemd.spec.
#
# Minimum rpm version supported: 4.14.0

%transfiletriggerin -P 900900 -p <lua> -- /lib/systemd/system /etc/systemd/system
-- This script will run after any package is initially installed or
-- upgraded. We care about the case where a package is initially
-- installed, because other cases are covered by the *un scriptlets,
-- so sometimes we will reload needlessly.

if posix.access("/run/systemd/system") then
    pid = posix.fork()
    if pid == 0 then
	assert(posix.exec("/bin/systemctl", "daemon-reload"))
    elseif pid > 0 then
	posix.wait(pid)
    end
end

%transfiletriggerpostun -P 1000100 -p <lua> -- /lib/systemd/system /etc/systemd/system
-- On removal, we need to run daemon-reload after any units have been
-- removed.
-- On upgrade, we need to run daemon-reload after any new unit files
-- have been installed, but before %postun scripts in packages get
-- executed.
if posix.access("/run/systemd/system") then
    pid = posix.fork()
    if pid == 0 then
	assert(posix.exec("/bin/systemctl", "daemon-reload"))
    elseif pid > 0 then
	posix.wait(pid)
    end
end

%transfiletriggerin -P 1000700 -p <lua> -- /usr/lib/sysusers.d
-- This script will process files installed in /usr/lib/sysusers.d to create
-- specified users automatically. The priority is set such that it
-- will run before the tmpfiles file trigger.
if posix.access("/run/systemd/system") then
    pid = posix.fork()
    if pid == 0 then
	assert(posix.exec("/bin/systemd-sysusers"))
    elseif pid > 0 then
	posix.wait(pid)
    end
end

%transfiletriggerin -P 1000600 -p <lua> -- /usr/lib/tmpfiles.d /lib/tmpfiles.d /etc/tmpfiles.d
-- This script will process files installed in /usr/lib/tmpfiles.d to create
-- tmpfiles automatically. The priority is set such that it will run
-- after the sysusers file trigger, but before any other triggers.
if posix.access("/run/systemd/system") then
    pid = posix.fork()
    if pid == 0 then
	assert(posix.exec("/bin/systemd-tmpfiles", "--create"))
    elseif pid > 0 then
	posix.wait(pid)
    end
end

%transfiletriggerin hwdb -P 1000700 -p <lua> -- /lib/udev/hwdb.d
-- This script will automatically invoke hwdb update if files have been
-- installed or updated in /lib/udev/hwdb.d.
if posix.access("/run/systemd/system") then
    pid = posix.fork()
    if pid == 0 then
	assert(posix.exec("/bin/systemd-hwdb", "update"))
    elseif pid > 0 then
	posix.wait(pid)
    end
end

%transfiletriggerin locale -P 1000700 -p <lua> -- /usr/lib/systemd/catalog
-- This script will automatically invoke journal catalog update if files
-- have been installed or updated in /usr/lib/systemd/catalog.
if posix.access("/run/systemd/system") then
    pid = posix.fork()
    if pid == 0 then
	assert(posix.exec("/bin/journalctl", "--update-catalog"))
    elseif pid > 0 then
	posix.wait(pid)
    end
end

%transfiletriggerin -P 1000600 -p <lua> -- /lib/udev/rules.d /etc/udev/rules.d
-- This script will automatically update udev with new rules if files
-- have been installed or updated in /lib/udev/rules.d and /etc/udev/rules.d.
if posix.access("/run/systemd/system") then
    pid = posix.fork()
    if pid == 0 then
	assert(posix.exec("/sbin/udevadm", "control", "--reload"))
    elseif pid > 0 then
	posix.wait(pid)
    end
end

%transfiletriggerin -P 1000500 -p <lua> -- /usr/lib/sysctl.d
-- This script will automatically apply sysctl rules if files have been
-- installed or updated in /usr/lib/sysctl.d.
if posix.access("/run/systemd/system") then
    pid = posix.fork()
    if pid == 0 then
	assert(posix.exec("/lib/systemd/systemd-sysctl"))
    elseif pid > 0 then
	posix.wait(pid)
    end
end

%transfiletriggerin -P 1000700 -p <lua> -- /usr/lib/binfmt.d
-- This script will automatically apply binfmt rules if files have been
-- installed or updated in /usr/lib/binfmt.d.
if posix.access("/run/systemd/system") then
    pid = posix.fork()
    if pid == 0 then
	assert(posix.exec("/lib/systemd/systemd-binfmt"))
    elseif pid > 0 then
	posix.wait(pid)
    end
end
